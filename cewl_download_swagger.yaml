openapi: 3.0.1
info:
  title: CTCI CEWL DOWNLOAD API
  description: |
    ![CTCI + CEWL logo](https://raw.githubusercontent.com/vmcommunity/marketing/main/CEWL/cewl_new_plus_ctci_v2.png)
    <br/>This is the CEWL Download API.   You can find out more about     at
    [http://ctci.ai](http://ctci.ai).      For this sample, you can use the api key
    `yo yo yo` to test the API this will return the 2020 NSA Chinese State Actors CVE Exploit List ([NSA CSA Link](https://media.defense.gov/2020/Oct/20/2002519884/-1/-1/0/CSA_CHINESE_EXPLOIT_VULNERABILITIES_UOO179811.PDF)).
  termsOfService: http://ctci.ai/terms/
  contact:
    email: sales@ctci.ai
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "0.5"
externalDocs:
  description: Find out more about CEWL
  url: http://ctci.ai
servers:
- url: https://cewl-download.azurewebsites.net/api/v1
security:
  - APIKeyQueryParam: []
    APIKeyHeader: []
tags:
- name: CEWL
  description: CEWL Download API
  externalDocs:
    description: Find out more
    url: https://ctci.ai/api
paths:
  /cve/cewl_download:
    get:
      tags:
      - CEWL Download
      summary: Download CEWL through the API
      operationId: CEWL_Download
      description: |
        <h4>This downloads CEWL!</h4> <br/> Only the x-api-key needs to be set as the query string parameter x-api-key. All other query string parameters are OPTIONAL. The other options cover different types of searching - keyword search, a filter query search, sorting and other utility-like functions.
        
         
          
          | Column Name | Column Details |
          | ------- | --------|
          | CVE   | The office CVE from Mitre / NVD   |
          | vendor| The vendor that the CVE pertains to, for example, Microsoft|
          | product| The vendor that the CVE pertains to, for example, Windows|
          | vulnerability_type| This is type of exploit used|
          | description| The description of the vulnerability|
          | date_added| The date the CVE was added to CEWL, this column is functional after 1st of November, 2020|
          | date_discovered| The date the vulnerability was discovered, for secrecy this might be offset but still valuable|
          | date_patched | The date there is a patch available for this CVE|
          | advisory | The advisory URL for more information on the CVE|
          | analysis_url| Detailed information at this analysis url|
          | claimed_attribution| If any groups have claimed or have found to have done this exploit|
          | malware| malware related to this CVE|
          | honeypot| First time of honeypot hit|
          | intel| First time of intel hit|
          | campaign| Any campaign name associated to this vulnerability|
          
          
      parameters:
      - name: CVE
        in: query
        description: 'This will do a search for a specific CVE within CEWL, for example, search for CVE-2019-0708, CVE=CVE-2019-0708'
        schema:
          type: string
        required: false
      - name: keyword_search
        in: query
        description: This searches all columns and finds all rows where it contains
          the keyword search.
        schema:
          type: string
        examples:
          empty:
            value: ""
            summary: --
          remote_code: 
            value: remote code
            summary: Mention of the word ''remote code'''
      - name: ignore_possible_encoding_columns
        in: query
        description: There are some columns that can have different encodings such
          as Chinese, Russian and Japanese, this will ignore those columns. Use 'on'
          and 'off' to use this. The Default is off
        schema:
          type: string
          enum: [off, on]
        required: false
      - name: sort_by
        in: query
        description: Sort columns, comma seperated such as 'honeypot,intel'
        schema:
          type: string
        required: false
      - name: sort_order
        in: query
        description: 'Sort order, you can specific overall as asc or desc, and if           you use multiple columns you can comma seperate this such as two  columns: vendor,product you could do asc,desc if you want. The Default is asc.'
        schema:
          type: string
        required: false
      - name: only_date
        in: query
        description: This if you only want the date and not date with '00:00:00' in
          your time columns. Use off or on to toggle this. The Default is on.
        schema:
          type: string
          enum: [off, on]
        required: false
      - name: all_lower
        in: query
        description: This makes all searches you do based on lower case values except for the CVE column. Use 'off' or 'on' to toggle this. The Default is on. 
        schema:
          type: string
          enum: [off, on]
        required: false
      - name: filter
        in: query
        description: 'This is very powerful, it follows Pandas query ability, you           can do things like: vendor==''microsoft'' and product==''internet explorer'' and intel>''2020''. Please note: You must use == for equality test.  If you use the single equal =, this will try set the value, which is not allowed in a filter. For more details\: https://queirozf.com/entries/pandas-query-examples-sql-like-syntax-queries-in-dataframes,*** add more examples.'
        schema:
          type: string
        required: false
        examples:
          empty:
            value: ""
            summary: --
          microsoft:
            value: vendor=='microsoft'
            summary: Filter by Microsoft
            
          microsoft_ie:
            value: vendor =='microsoft' and product=='internet explorer'
            summary: Filter by Microsoft IE
          cisco:
            value: vendor=='cisco'
            summary: Filter by Cisco
         
          recent:
            value: "intel>'2020'"
            summary: Recent Intel
      - name: raw_filter
        in: query
        description: This allows the filter to not replace = with ==, remove multiple spaces and always use the single quote \' for equals. The format for this is from Pandas where query format.
        required: false
        schema:
          type: string
          enum: [off, on]
          
      - name: output_columns
        in: query
        description: 'Allows you to only output the list of columns you are after.           The columns need to be comma separated, for example ''intel,vendor'' '
        schema:
          type: string
        required: false
      - name: output_format
        in: query
        description: 'The different output formats. Note: json, is json:record See Pandas documentation for more details ***'
        schema:
          type: string
          enum: 
          - csv 
          - json
          - web
          
          - 'json:split'
          - 'json:records'
          - 'json:index'
          - 'json:table'
          - 'json:columns'
          - 'json:values'
        required: false
      responses:
        '4XX':
          description: Unexpected error.
        '5XX':
          description: Unexpected error.
        200:
          description: Processing was good
          content: # Response body
            text/csv:
              schema:
                type: string
                example: TBD
            application/json:
              schema:
                type: object
                example: "{ 'CVE': 'CVE-2020-XXXXX'}"
components:
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      name: x-api-key
      in: header
    APIKeyQueryParam:
      type: apiKey
      name: x-api-key
      in: query

